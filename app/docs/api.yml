openapi: 3.0.0
servers:
  - url: https://www.bhut.com.br
info:
  version: 1.0.0
  title: Animal Adoption API
  description: API to animal adoption web site
  contact:
    name: Animal Adoption
    url: 'https://www.animal-adoption.com.br'
    email: 'contato@animal-adoption.com.br'
  license:
    name: MIT
    url : https://api.github.com/licenses/mit
tags:
  - name: Auth
    description: Authentication related endpoints
  - name: Adoption Data
    description: Adoption Data related endpoints
  - name: Animals
    description: Animals related endpoints
  - name: People
    description: People related endpoints
  - name: Vaccines
    description: Vaccines related endpoints
  - name: Vaccinated Animals
    description: Vaccinated Animals related endpoints
  - name: Users
    description: Users related endpoints
paths:
  # AUTH ROUTES
  /auth/token:
    post:
      summary: 'Create authentication'
      description: 'Generate JWT token'
      operationId: 'postAuthToken'
      tags:
        - Auth
      requestBody:
        description: 'Data to authenticate user'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthRequest'
        required: true
      responses:
        '200':
          description: 'Authenticated user JWT token'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          description: 'Invalid requisition'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
        '403':
          description: 'Access denied'
        '500':
          description: 'Internal error in service'
  # ADOPTION DATA ROUTES
  /adoption-data:
    get:
      summary: 'List adoption data'
      description: 'Return a list of adoption data'
      operationId: 'getAdoptionDataList'
      tags:
        - Adoption Data
      responses:
        '200':
          description: 'Sucess'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AdoptionDataResponse'
        '400':
          description: 'Invalid requisition'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
        '401':
          description: 'Invalid or inexistent jwt token'
        '403':
          description: 'Access denied'
        '500':
          description: 'Internal error in service'
      security:
        - JwtAuth: [ ]
  /adoption-data/{cpf_person}:
    get:
      summary: 'Adoption data by person document'
      description: 'Return adoption data by person document'
      operationId: 'getAdoptionDataByPerson'
      tags:
        - Adoption Data
      parameters:
        - name: cpf_person
          in: path
          description: 'Document of person'
          required: true
          schema:
            type: string
            example: '123.456.789-10'
      responses:
        '200':
          description: 'Sucess'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AdoptionDataResponse'
        '400':
          description: 'Invalid requisition'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
        '401':
          description: 'Invalid or inexistent jwt token'
        '403':
          description: 'Access denied'
        '404':
          description: Not found
        '500':
          description: 'Internal error in service'
      security:
        - JwtAuth: [ ]
  /adoption-data/{uuid_aninals}:
    post:
      summary: 'Adopt an animal'
      description: 'Adopt an animal giving person data'
      operationId: 'postAdoptionData'
      tags:
        - Adoption Data
      requestBody:
        description: 'Data to adopt an animal'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAdoptionDataRequest'
        required: true
      parameters:
        - name: uuid_aninals
          in: path
          description: 'Uuid of animal'
          required: true
          schema:
            type: string
            format: uuid
            example: '35d00fad-9f28-437d-934c-6b798a23a72b'
      responses:
        '204':
          description: 'Request processed'

        '400':
          description: 'Invalid requisition'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
        '401':
          description: 'Invalid or inexistent jwt token'
        '403':
          description: 'Access denied'
        '404':
          description: 'Not found'
        '500':
          description: 'Internal error in service'
      security:
        - JwtAuth: [ ]
  # ANIMALS ROUTES
  /animals:
    post:
      summary: 'Create an animal'
      description: 'Create an animal and insert into system'
      operationId: 'createAnimal'
      tags:
        - Animals
      requestBody:
        description: 'Data to create an animal'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAnimalRequest'
        required: true
      responses:
        '204':
          description: 'Request processed'

        '400':
          description: 'Invalid requisition'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
        '401':
          description: 'Invalid or inexistent jwt token'
        '403':
          description: 'Access denied'
        '500':
          description: 'Internal error in service'
      security:
        - JwtAuth: [ ]
    get:
      summary: 'List animals'
      description: 'Return a list of animals'
      operationId: 'getAnimalsList'
      tags:
        - Animals
      responses:
        '200':
          description: 'Sucess'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AnimalResponse'
        '400':
          description: 'Invalid requisition'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
        '401':
          description: 'Invalid or inexistent jwt token'
        '403':
          description: 'Access denied'
        '500':
          description: 'Internal error in service'
      security:
        - JwtAuth: [ ]
  /animals/{uuid}:
    get:
      summary: 'Adopt an animal'
      description: 'Adopt an animal giving person data'
      operationId: 'getAnimalById'
      tags:
        - Animals
      parameters:
        - name: uuid
          in: path
          description: 'Uuid of animal'
          required: true
          schema:
            type: string
            format: uuid
            example: '35d00fad-9f28-437d-934c-6b798a23a72b'
      responses:
        '200':
          description: 'Request processed'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnimalResponse'
        '400':
          description: 'Invalid requisition'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
        '401':
          description: 'Invalid or inexistent jwt token'
        '403':
          description: 'Access denied'
        '404':
          description: 'Not found'
        '500':
          description: 'Internal error in service'
      security:
        - JwtAuth: [ ]
  # PEOPLE
  /people:
    post:
      summary: 'Create a person'
      description: 'Create a person and insert into system'
      operationId: 'createPerson'
      tags:
        - People
      requestBody:
        description: 'Data to create a person'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePeopleRequest'
        required: true
      responses:
        '204':
          description: 'Request processed'

        '400':
          description: 'Invalid requisition'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
        '401':
          description: 'Invalid or inexistent jwt token'
        '403':
          description: 'Access denied'
        '409':
          description: 'Conflict'
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: '#/components/schemas/ResourceAlreadyExistsResponse'
        '500':
          description: 'Internal error in service'
      security:
        - JwtAuth: [ ]
    get:
      summary: 'List people'
      description: 'Return a list of people'
      operationId: 'getPeopleList'
      tags:
        - People
      responses:
        '200':
          description: 'Sucess'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PeopleResponse'
        '400':
          description: 'Invalid requisition'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
        '401':
          description: 'Invalid or inexistent jwt token'
        '403':
          description: 'Access denied'
        '500':
          description: 'Internal error in service'
      security:
        - JwtAuth: [ ]
  /people/{uuid}:
    get:
      summary: 'return a person'
      description: 'return one person'
      operationId: 'getPersonById'
      tags:
        - People
      parameters:
        - name: uuid
          in: path
          description: 'Uuid of person'
          required: true
          schema:
            type: string
            format: uuid
            example: '35d00fad-9f28-437d-934c-6b798a23a72b'
      responses:
        '200':
          description: 'sucess'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PeopleResponse'
        '400':
          description: 'Invalid requisition'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
        '401':
          description: 'Invalid or inexistent jwt token'
        '403':
          description: 'Access denied'
        '404':
          description: 'Not found'
        '500':
          description: 'Internal error in service'
      security:
        - JwtAuth: [ ]
    put:
      summary: 'Update person'
      description: 'Update one person and insert changes into system'
      operationId: 'updatePerson'
      tags:
        - People
      parameters:
        - name: uuid
          in: path
          description: 'Uuid of person'
          required: true
          schema:
            type: string
            format: uuid
            example: '35d00fad-9f28-437d-934c-6b798a23a72b'
      requestBody:
        description: 'Data to create a person'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePeopleRequest'
        required: true
      responses:
        '204':
          description: 'Request processed'

        '400':
          description: 'Invalid requisition'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
        '401':
          description: 'Invalid or inexistent jwt token'
        '403':
          description: 'Access denied'
        '409':
          description: 'Conflict'
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: '#/components/schemas/ResourceAlreadyExistsResponse'
        '500':
          description: 'Internal error in service'
      security:
        - JwtAuth: [ ]
    delete:
      summary: 'Delete person'
      description: 'Delete one person'
      operationId: 'deletePerson'
      tags:
        - People
      parameters:
        - name: uuid
          in: path
          description: 'Uuid of person'
          required: true
          schema:
            type: string
            format: uuid
            example: '35d00fad-9f28-437d-934c-6b798a23a72b'
      responses:
        '204':
          description: 'Request processed'

        '400':
          description: 'Invalid requisition'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
        '401':
          description: 'Invalid or inexistent jwt token'
        '403':
          description: 'Access denied'
        '409':
          description: 'Conflict'
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: '#/components/schemas/ResourceAlreadyExistsResponse'
        '500':
          description: 'Internal error in service'
      security:
        - JwtAuth: [ ]
  /people/{uuid}/inactivate:
    patch:
      summary: 'Inactivate person'
      description: 'Inactivate one person'
      tags:
        - People
      operationId: 'inactivatePerson'
      parameters:
        - name: uuid
          in: path
          description: 'Uuid of the person to be inactivated'
          schema:
            type: string
            format: uuid
            example: '7a5a1e4c-317e-4abe-b302-b88639bb2ac0'
          required: true
      responses:
        '204':
          description: 'request processed'
        '400':
          description: 'Invalid requisition'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
        '401':
          description: 'Invalid or inexistent jwt token'
        '403':
          description: 'Access denied'
        '500':
          description: 'Internal error in service'
      security:
        - JwtAuth: []
  /people/{uuid}/activate:
    patch:
      summary: 'Activate person'
      description: 'activate one person'
      tags:
        - People
      operationId: 'activatePerson'
      parameters:
        - name: uuid
          in: path
          description: 'Uuid of the person to be activated'
          schema:
            type: string
            format: uuid
            example: '7a5a1e4c-317e-4abe-b302-b88639bb2ac0'
          required: true
      responses:
        '204':
          description: 'request processed'
        '400':
          description: 'Invalid requisition'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
        '401':
          description: 'Invalid or inexistent jwt token'
        '403':
          description: 'Access denied'
        '500':
          description: 'Internal error in service'
      security:
        - JwtAuth: []
  # VACCINES
  /vaccines:
    post:
      summary: 'Create a vaccine'
      description: 'Create a vaccine and insert into system'
      operationId: 'createVaccine'
      tags:
        - Vaccines
      requestBody:
        description: 'Data to create a vaccine'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateVaccineRequest'
        required: true
      responses:
        '204':
          description: 'Request processed'

        '400':
          description: 'Invalid requisition'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
        '401':
          description: 'Invalid or inexistent jwt token'
        '403':
          description: 'Access denied'
        '409':
          description: 'Conflict'
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: '#/components/schemas/ResourceAlreadyExistsResponse'
        '500':
          description: 'Internal error in service'
      security:
        - JwtAuth: [ ]
    get:
      summary: 'List vaccines'
      description: 'Return a list of vaccines'
      operationId: 'getVaccinesList'
      tags:
        - Vaccines
      responses:
        '200':
          description: 'Sucess'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/VaccineResponse'
        '400':
          description: 'Invalid requisition'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
        '401':
          description: 'Invalid or inexistent jwt token'
        '403':
          description: 'Access denied'
        '500':
          description: 'Internal error in service'
      security:
        - JwtAuth: [ ]
  /vaccines/{uuid}:
    get:
      summary: 'return a vaccine'
      description: 'return one vaccine'
      operationId: 'getVaccineById'
      tags:
        - Vaccines
      parameters:
        - name: uuid
          in: path
          description: 'Uuid of vaccine'
          required: true
          schema:
            type: string
            format: uuid
            example: '4d2d39af-8ebe-48fe-aa5a-bc0e3bb01a33'
      responses:
        '200':
          description: 'sucess'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VaccineResponse'
        '400':
          description: 'Invalid requisition'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
        '401':
          description: 'Invalid or inexistent jwt token'
        '403':
          description: 'Access denied'
        '404':
          description: 'Not found'
        '500':
          description: 'Internal error in service'
      security:
        - JwtAuth: [ ]
components:
  schemas:
    AdoptionDataResponse:
      type: object
      required:
        - uuid
        - uuid_animals
        - uuid_people
        - adoption_date
      properties:
        uuid:
          type: string
          format: uuid
          description: 'uuid of adoption data'
          example: '44cb27c4-a4ab-4cdc-a63f-afa0c181c3a5'
        uuid_animals:
          type: string
          format: uuid
          description: 'uuid of animal'
          example: '35d00fad-9f28-437d-934c-6b798a23a72b'
        uuid_people:
          type: string
          format: uuid
          description: 'uuid of person who adopted the animal'
          example: '24720bc0-0e39-4cdd-9cb1-2860ecaa30fa'
        adoption_date:
          type: string
          description: 'Date when adoption has made'
          example: '2022-06-01'
    AnimalResponse:
      type: object
      required:
        - uuid
        - name
        - age
        - sex
        - species
      properties:
        uuid:
          type: string
          format: uuid
          description: 'Uuid of animal'
          example: 'dcbb404d-fe3b-4d81-8e8a-6c6a169b1d84'
        name:
          type: string
          description: 'Name of animal'
          example: 'Zeus'
        age:
          type: integer
          description: 'Age of animal'
          example: 1
        sex:
          type: string
          description: 'Sex of animal'
          enum:
            - 'M'
            - 'F'
          example: 'M'
        species:
          type: string
          description: 'Specie of animal'
          example: 'Dog'
    AuthRequest:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
          description: 'Username to access system'
          example: 'admin@gmail.com'
        password:
          type: string
          format: password
          description: 'Password to access system'
          example: 'admin@123'
    AuthResponse:
      type: object
      required:
        - acessToken
        - tokenType
        - expiresIn
      properties:
        accessToken:
          type: string
          description: 'Jwt token'
          example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJwYXlsb2FkIjp7InV1aWQiOiJkMzZhMGZlYS0yMmZlLTQ4MzItYmE2Mi03ZTQzMzNjMzEwMDEifSwiaWF0IjoxNjUzMTQ0OTgyLCJleHAiOjE2NTMxNDUwNDJ9.9KpVJJ9Z-6w-4hcwTVEIOUCS4ouq9j9lagJT5T2egUs'
        tokenType:
          type: string
          description: 'Token type'
          example: 'Bearer'
        expiresIn:
          type: integer
          description: 'Minutes to token expires'
          example: 60
    CreateAdoptionDataRequest:
      type: object
      required:
        - adoption_date
        - cpf_person
      properties:
        adoption_date:
          type: string
          description: 'Date the animal will be adopted'
          example: '2022-06-01'
        cpf_person:
          type: string
          description: 'Tax id of person who will adopt an animal'
    CreateAnimalRequest:
      type: object
      required:
        - name
        - age
        - sex
        - species
      properties:
        name:
          type: string
          description: 'Name of animal'
          example: 'Zeus'
        age:
          type: integer
          description: 'Age of animal'
          example: 1
        sex:
          type: string
          description: 'Sex of animal'
          enum:
            - 'M'
            - 'F'
          example: 'M'
        species:
          type: string
          description: 'Specie of animal'
          example: 'Dog'
    CreatePeopleRequest:
      type: object
      required:
        - name
        - cpf
        - rg
        - street
        - city
        - district
        - country
        - number
        - birth_date
      properties:
        name:
          type: string
          description: 'Name of person'
          example: 'Lucas Fonte'
        cpf:
          type: string
          description: 'Cpf of person'
          example: '123.456.789-10'
        rg:
          type: string
          description: 'RG of person'
          example: '524568562'
        street:
          type: string
          description: 'Street where person address is registered'
          example: 'Atlantic Avenue'
        number:
          type: string
          description: 'Number where person lives'
          example: '1983'
        district:
          type: string
          description: 'district where person address is registered'
          example: 'Queens'
        city:
          type: string
          description: 'city where person address is registered'
          example: 'New York'
        country:
          type: string
          description: 'country where person address is registered'
          example: 'USA'
        birth_date:
          type: string
          description: 'Birth date of person'
          example: '2001-08-25'
    CreateVaccineRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          description: Name of vaccine
          example: 'Pfizer'
    PeopleResponse:
      type: object
      required:
        - uuid
        - cpf
        - name
        - rg
        - city
        - district
        - street
        - country
        - number
        - birth_date
        - active
      properties:
        uuid:
          type: string
          format: uuid
          description: 'Person uuid'
          example: '34b9eab9-60e6-417b-8703-a41e74f2a74b'
        name:
          type: string
          description: 'Name of person'
          example: 'Lucas Fonte'
        cpf:
          type: string
          description: 'Cpf of person'
          example: '123.456.789-10'
        rg:
          type: string
          description: 'RG of person'
          example: '524568562'
        street:
          type: string
          description: 'Street where person address is registered'
          example: 'Atlantic Avenue'
        number:
          type: string
          description: 'Number where person lives'
          example: '1983'
        district:
          type: string
          description: 'district where person address is registered'
          example: 'Queens'
        city:
          type: string
          description: 'city where person address is registered'
          example: 'New York'
        country:
          type: string
          description: 'country where person address is registered'
          example: 'USA'
        birth_date:
          type: string
          description: 'Birth date of person'
          example: '2001-08-25'
        active:
          type: boolean
          description: 'Checks if the person is active'
          example: true
    ResourceAlreadyExistsResponse:
      type: object
      properties:
        errors:
          type: array
          items:
            type: object
            properties:
              code:
                type: string
                enum:
                  - 'RESOURCE_ALREADY_EXISTS'
              message:
                type: string
                example: 'This resource already exists'
    UpdatePeopleRequest:
      type: object
      properties:
        name:
          type: string
          description: 'Name of person'
          example: 'Lucas Fonte'
        cpf:
          type: string
          description: 'Cpf of person'
          example: '123.456.789-10'
        rg:
          type: string
          description: 'RG of person'
          example: '524568562'
        street:
          type: string
          description: 'Street where person address is registered'
          example: 'Atlantic Avenue'
        number:
          type: string
          description: 'Number where person lives'
          example: '1983'
        district:
          type: string
          description: 'district where person address is registered'
          example: 'Queens'
        city:
          type: string
          description: 'city where person address is registered'
          example: 'New York'
        country:
          type: string
          description: 'country where person address is registered'
          example: 'USA'
        birth_date:
          type: string
          description: 'Birth date of person'
          example: '2001-08-25'
    VaccineResponse:
      type: object
      required:
        - uuid
        - name
      properties:
        uuid:
          type: string
          description: Uuid of vaccine
          example: '4d2d39af-8ebe-48fe-aa5a-bc0e3bb01a33'
        name:
          type: string
          description: Name of Vaccine
          example: 'Pfizer'
    ValidationErrorResponse:
      required:
        - code
        - message
      properties:
        code:
          description: 'Error code'
          type: string
          example: 'INVALID_FIELD'
        message:
          description: 'Error message'
          type: string
          example: 'The field username is required'
  securitySchemes:
    JwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
